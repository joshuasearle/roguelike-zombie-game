ZOMBIE ATTACKS
Z1) ZOMBIE BITES
To implement this feature we will add a new class "IntrinsicZombieWeapon".
This new class will inherit from "IntrinsicWeapon" but will contain the extra attribute
"hitChance". In the old system every attack has a 50% chance of hitting using the rand.nextBoolean,
however we need to change these hitChances for bite. Now in AttackAction's execute method we can
check if a weapon has a "hitChance" and if it does we use that instead of using the rand.nextBoolean
to determine weather the attack hit or missed.

This implementation method seemed the most obvious as we can't add individual hitChances for every attack,
as IntrinsicWeapon, WeaponItem, and Weapon are all engine classes that we can't change (in particular, add attributes).
As creating a new class that inherits from an engine class is allowed, we chose to do this.

Z2) ZOMBIE BITE HEALS ZOMBIE
To implement this feature we will change our new class "IntrinsicZombieWeapon" by adding a new attribute, "healAmount".
Now in AttackAction's execute method, if we land a successful hit, and the Weapon used has a "healAmount" attribute,
we can heal the player by "healAmount" using Actor's method "heal()".

This implementation method only makes Zombie dependent on "IntrinsicZombieWeapon" which it already was from the
previous feature. As an "IntrinsicZombieWeapon" can be used as a normal "Weapon" it is easy to implement the change,
and we don't have to store healAmount in every single weapon in the game.

Z3) ZOMBIES PICK UP WEAPONS
To implement this feature, we simply look through the possible actions input in the Zombie's playTurn method.
These action were already being input but were not being used. We simply have to look through all the actions,
and if there is a PickUpItemAction the Zombie will perform that action. (Note: before a zombie picks up a weapon
we have to check if it still has both of it's arms, and that it also isn't currently holding a weapon).

This implementation introduces no new dependencies as the actions were already being used as input for the function,
and simply checking for a PickUpItemAction is easy to implement in the code.

Z4) ZOMBIES SAY "BRAINS"
To implement this feature, in a Zombies playTurn method we simply add a step at the start that says that 10% of the time,
"Brains" will be printed using System.out.println().

This implementation introduces no new dependencies and is easy to implement in code.


BEATING UP THE ZOMBIES
B1) ZOMBIE'S LIMBS CAN FALL OFF
To implement this feature we can override Actor's hurt method in the Zombie class. In the hurt method we make it so that
25% of the time, when a Zombie still has at least one limb we call another method we can add to Zombie called "looseLimb()".
In this new method we can choose a random remaining limb, create a new DropItemAction, and then execute that new action.
This drops the limb onto the ground, and removes the limb from the zombies inventory (the limb isn't in the Zombie's inventory,
but removing an item from an inventory from which it doesn't exist is allowed).

As a Zombie is the only actor that has limbs that can fall off, it makes sense that we would store this data is the Zombie subclass,
to reduce memory consumption. This implementation seems fairly simple and easy to code, so we went with it.

B2) ZOMBIES START WITH 2 ARMS AND 2 LEGS
To implement this feature we can add two new int attributes to Zombie called: "legCount' and "armCount". When we Construct
a Zombie, these will both be initialised to two.

This seemed like the simplest implementation of this feature, so we decided it was best.

B3) NO. OF ARMS AFFECTS PUNCH CHANCE AND WEAPON HOLDING
To implement punch chance we can change the "getIntrinsicWeapon" method in Zombie. We can check how many arms the Zombie has,
and if it has two arms, the chance of punching is 50%, if the zombie has one arm, the chance of punching is 25%, and finally if
the zombie has no arms, the chance of punching is 0%. 

This implementation is very simple, and introduces no new dependencies.

To implement weapon dropping in the Zombie's hurt method we can add some more functionality. If a Zombie is loosing a limb,
we check if it is an arm. If it is an arm, we find how many arms the Zombie has before the arm is dropped. If the Zombie had 2
arms, the chance to drop is 50%, if the Zombie has one arm, the chance to drop is 25%, and the Zombie can never have 0 arms at this point.
If a Zombie does drop it's weapon, we create a new DropItemAction and execute this. This will drop the item onto the Location and remove
it from the Zombie's inventory.

This implementation is also fairly simple, but makes Zombie dependent on DropItemAction, however Zombie was dependent on Action,
and being dependent on DropItemAction seems inevitable in all implementations. 

B4+5) NO. OF LEGS AFFECTS ZOMBIE MOVEMENT
To implement this feature we can change the Zombie's playTurn method. Before we check if an action is null, we can also check if
the Action is a MoveActorAction. If it is we can then find how many legs the Zombie has. If the Zombie has 2, the Action will be returned.
If the Zombie has 1, it will only move if the previous move wasn't an MoveActorAction. If a Zombie has no legs, the Action will never be returned.

This implementation just performs checks on Actions that would have normally been returned. This means the implementation introduces no
new dependencies.

B6) LIMBS ARE DROPPED AT LOCATION
see B1.

B7) DROPPED LIMBS CAN BE USED AS SIMPLE CLUBS
As limbs are dropped onto the ground when they fall off, they need to be an item. We can create a new class, ZombieLimb that extends
WeaponItem.

We need to create new class that inherits from WeaponItem as WeaponItem is an abstract class and can't be instantiated,
and as the Zombie arm and Zombie leg can both be used as ingredients for other weapons they need to be weapon items and not just weapons.
